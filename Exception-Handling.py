# -*- coding: utf-8 -*-
"""Untitled26.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YnsASL5pquPYSTUy6nhnHRmNMzx-wfnO
"""

try:
  a= [1,2,3,4,5]
  a.append(4)
  b=5
  b.append(5)
  print(b)

except AttributeError:
  print("Attribute error occured")
except:
  print("Error occured")
else:
  print("No error occured")
finally:
  print("finally is excuted")

try:
  a = 5
  print(a + b)
except NameError:
  print("NameError: 'b' is not defined")
finally:
    print("Error")

try:
    result = "hello" + 5
except TypeError:
    print("Error")
finally:
    print("TypeError")

try:
    a = [1, 2, 3]
    print(a[5])
except IndexError:
    print("Error")
finally:
    print("IndexError occured")

try:
    with open("file.txt", "r") as file:
        content = file.read()
except FileNotFoundError:
    print("Error")
finally:
    print("File error")

try:
    num = 10
    num.append(5)
except AttributeError:
    print("Error")
finally:
    print("AttributeError handling complete.")

try:
  a=5
  print(a/0)
except ZeroDivisionError:
  print("Error")
finally:
  print("error occured")

try:
  f = open("file2.text")
  try:
    f.write("Hello")
  except:
    print("Error occurred  .")
  finally:
    f.close()
except:
  print("Error occurred  file.")

class AgeNoVaLidError(Exception):
  pass
try:
  age = [33,12,19,27,17]
  for i in age:
    if i<18:
      raise AgeNoVaLidError
    else:
      print(i)
except AgeNoVaLidError:
  print("Age not Valid Error")

class InsufficientFundsException(Exception):
    pass

class Account:
    def __init__(self, balance):
        self.balance = balance

    def withdraw(self, amount):
        if amount > self.balance:
            raise InsufficientFundsException("Insufficient funds")
        else:
            self.balance -= amount
            print("Remaining balance:", self.balance)

try:
    a = Account(5000)
    a.withdraw(6000)
except InsufficientFundsException as e:
    print(e)

class InsufficientFundsException(Exception):
    pass

class Account:
    def __init__(self, balance):
        self.balance = balance

    def withdraw(self, amount):
        if amount > self.balance:
            raise InsufficientFundsException("Insufficient funds")
        else:
            self.balance -= amount
            print("Remaining balance:", self.balance)

    def check_balance(self):
        if self.balance > 100000:
            raise OutOfRangeBalanceException("Balance exceeds the allowed limit ")
        else:
            print("Balance is within the allowed range:", self.balance)

try:
    a = Account(5000)
    a.withdraw(6000)
except InsufficientFundsException as e:
    print(e)


class OutOfRangeBalanceException(Exception):
    pass

try:
    a = Account(150000)
    a.check_balance()
except OutOfRangeBalanceException as e:
    print(e)

try:
    values = [10/2, 20/2, 30/2, 0/2]
    divisor = int(input("Enter a number:"))
    for i in values:
        result = i / divisor
        print(result)
except ZeroDivisionError:
    print("Value divide zero")
except ValueError:
    print("error")
except TypeError:
    print("error")
except ArithmeticError:
    print("error")
except IndexError:
    print("error")
except ArithmeticError:
    print("error")
except:
    print("error occurred")
else:
    print("else executed")
finally:
    print("finallyÂ executed")